@page "/{Area?}/{Page?}"
@implements IDisposable;
@inject NavigationManager Navman


<BSContainer Class="bd-main py-3" Size="Container.Fluid">
    <div class="bd-content">
            <BSDropdown IsDiv="true" Placement="Placement.BottomStart">
                <Toggler>
                    <BSToggle>Test</BSToggle>
                </Toggler>
                <Content>
                    <BSDropdown  Placement="Placement.RightEnd">
                        <Toggler>
                            <BSToggle>Test</BSToggle>
                        </Toggler>
                        <Content>Test</Content>
                    </BSDropdown>
                </Content>
            </BSDropdown>
        <MarkdownToComponent Source="@Source" NamespaceRoot="BlazorStrap_Docs.Samples" WebRoot="docs/Samples/" DefaultClass="bd-example">
            404
        </MarkdownToComponent>
    </div>
</BSContainer>

@code {

    [ParameterAttribute]
    public string? Area { get; set; }

    [ParameterAttribute]
    public string? Page { get; set; }

    private string Source { get; set; }

    protected override void OnInitialized()
    {
        if (Area is null) Source = $"docs/Static/index.md";
        else if (Page is null) Source = $"docs/Static/{FirstCharToUpper(Area)}.md";
        else Source = $"docs/Static/{FirstCharToUpper(Area)}/{FirstCharToUpper(Page)}.md";
        Navman.LocationChanged += NavmanOnLocationChanged;
    }

    private void NavmanOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (Area is null) Source = $"docs/Static/index.md";
        else if (Page is null) Source = $"docs/Static/{FirstCharToUpper(Area)}.md";
        else Source = $"docs/Static/{FirstCharToUpper(Area)}/{FirstCharToUpper(Page)}.md";
        StateHasChanged();
    }

    private static string FirstCharToUpper(string input) =>
        input switch
        {
            null => throw new ArgumentNullException(nameof(input)),
            "" => throw new ArgumentException($"{nameof(input)} cannot be empty", nameof(input)),
            _ => string.Concat(input[0].ToString().ToUpper(), input.AsSpan(1))
            };

    public void Dispose()
    {
        Navman.LocationChanged -= NavmanOnLocationChanged;
    }

}