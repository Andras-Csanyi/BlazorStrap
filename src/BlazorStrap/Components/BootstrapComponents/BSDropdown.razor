@namespace BlazorStrap
@inherits BlazorStrapBase
@if (Group != null && string.IsNullOrEmpty(Target))
{
    <BlazorStrap.InternalComponents.Error Name="BSDropdown">
        <strong>Target</strong> can not be empty when inside a button group.
    </BlazorStrap.InternalComponents.Error>

    return;
}
<CascadingValue Value="this">
    @if (Parent != null)
    {
        <div class="dropdown dropdown-submenu">
            @Toggler
            <ul class="@ClassBuilder" @attributes="Attributes" @ref="MyRef" data-blazorstrap="@DataId">
                @Content
            </ul>
        </div>
    }
    else
    {
        @if (NavItem != null )
        {
            @Toggler
            <ul class="@ClassBuilder" @attributes="Attributes" @ref="MyRef" data-bs-popper="blazorstrap" data-blazorstrap="@DataId">
                @Content
            </ul>
        }
        else if (Demo)
        {
            <ul class="@ClassBuilder" @attributes="Attributes" @ref="MyRef" data-blazorstrap="@DataId">
                @Content
            </ul>
        }
        else if(Group != null && Target != null && !IsStatic)
        {
            @Toggler
            <BSPopover DropdownOffset="@Offset" Placement="Group.DropdownPlacement" IsDropdown="true" Class="@GroupClassBuilder" Attributes="@Attributes" Target="@Target" @ref="PopoverRef">
                <Content>
                    @Content
                </Content>
            </BSPopover>
        }
        else if(IsDiv)
        {
            @Toggler
            <BSPopover DropdownOffset="@Offset" Placement="Group.DropdownPlacement" IsDropdown="true" Class="@GroupClassBuilder" Attributes="@Attributes" Target="@Target" @ref="PopoverRef">
                <Content>
                    @Content
                </Content>
            </BSPopover>
        }
        else
        {
            <div class="dropdown">
                @Toggler
                <ul class="@ClassBuilder" @attributes="Attributes" @ref="MyRef" data-bs-popper="blazorstrap" data-blazorstrap="@DataId">
                    @Content
                </ul>
            </div>
        }

    }
</CascadingValue>
