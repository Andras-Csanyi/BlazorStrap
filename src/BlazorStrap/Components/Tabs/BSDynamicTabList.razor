@namespace BlazorStrap.NotReady.DontUse
@using System.Text.RegularExpressions
@typeparam TItem

@foreach (var item in Items)
{ 
    var dynamicItem = new DynamicItem() {Item = item};
    <CascadingValue Value="dynamicItem" >
        <BSTab @key="item">
            <BSTabLabel>@TemplateLabel(item)</BSTabLabel>
            <BSTabContent>@TemplateContent(item)</BSTabContent>
        </BSTab>
    </CascadingValue>
}


@code
{
    [CascadingParameter] protected BSTabGroup Group { get; set; }
    [Parameter] public RenderFragment<TItem> TemplateLabel { get; set; }
    [Parameter] public RenderFragment<TItem> TemplateContent { get; set; }

    [Parameter] public string Class { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public bool? InitialSelection { get; set; }

    TItem SelectedItem = default;
    private IEnumerable<TItem> _items;

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    private int GetHashCode<T>(T source)
    {
        int hash = 0;
        hash = EqualityComparer<T>.Default.GetHashCode(source);
        return hash;
    }


    private int GetOrderIndependentHashCode<T>(IEnumerable<T> source)
    {
        int hash = 0;
        foreach (T element in source)
        {
            hash = hash ^ EqualityComparer<T>.Default.GetHashCode(element);
        }
        return hash;
    }

}